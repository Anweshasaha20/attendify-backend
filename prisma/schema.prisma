generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  pending
  accepted
  rejected
  blocked
}

model User {
  id                  String          @id @default(uuid())
  fullName            String
  email               String          @unique
  username            String          @unique
  password            String
  refreshToken        String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  enrolledClasses     Class[]         @relation("ClassEnrollments")
  administeredClasses Class[]         @relation("ClassAdministrations")
  attendanceLogs      AttendanceLog[] @relation("UserAttendanceLogs")
  joinRequests        JoinRequest[]   @relation("requestedUser")
  notifications       Notification[]  @relation("UserNotifications")

  @@index([email])
}

// Classes are created by users, whoever creates the class is the admin
// Admins can add other users as participants and promote them to admins
model Class {
  id            String         @id @default(uuid())
  name          String
  description   String?
  code          String         @unique
  admins        User[]         @relation("ClassAdministrations")
  participants  User[]         @relation("ClassEnrollments")
  sessions      Session[]
  joinRequests  JoinRequest[]  @relation("requestedClass")
  notifications Notification[] @relation("ClassNotifications")
}

// Sessions are created by admins of a class
model Session {
  id             String          @id @default(uuid())
  name           String
  description    String?
  class          Class           @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId        String
  startTime      DateTime
  duration       Int
  endTime        DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  attendanceLogs AttendanceLog[] @relation("SessionAttendanceLogs")

  @@index([classId])
}

// Attendance logs are created when a user attends a session
model AttendanceLog {
  id         String   @id @default(uuid())
  attendee   User     @relation("UserAttendanceLogs", fields: [attendeeId], references: [id], onDelete: Cascade)
  attendeeId String
  session    Session  @relation("SessionAttendanceLogs", fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId  String
  timestamp  DateTime @default(now())

  @@index([attendeeId, sessionId])
}

// A user can request to join a class
model JoinRequest {
  id        String   @id @default(uuid())
  user      User     @relation("requestedUser", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  class     Class    @relation("requestedClass", fields: [classId], references: [id], onDelete: Cascade)
  classId   String
  status    Status   @default(pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Notifications can be sent to users or classes
// if user is null, then the notification is for the class or vice versa
model Notification {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())
  class     Class?   @relation("ClassNotifications", fields: [classId], references: [id], onDelete: Cascade)
  classId   String?
  user      User?    @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
}
